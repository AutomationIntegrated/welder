#!/bin/bash

[ -n "$DEBUG" ] && set -v

set -eu

source $WELDER_ROOT/libexec/priv/_helpers

playbook=$1
[ -z "$playbook" ] && __fail "Usage: x run <playbook-name>"

__load_config "$playbook.yml"

[ -z "$cfg_ssh_url" ] && __fail "ssh_url variable must be set in $playbook.yml"
[ ! -d ./modules ]    && __fail "no modules/ directory found"

# Run all *.sh scripts for each module listed in $playbook
function __run_scripts() {
  echo

  for module in "${cfg_modules[@]}"
  do
    __info "module $module\n"

    for script in $(find "./modules/$module" -name "*.sh")
    do
      __info "script $script\n"

      if [ -z ${sudo_pass+x} ]
      then
        # no sudo_pass set, run the script directly
        ssh -t "$cfg_ssh_url" "$(< $script)"
      else
        # wrap the ssh script with an "expect" script to automatically
        # enter sudo password
        $WELDER_ROOT/libexec/priv/run-ssh-script "$cfg_ssh_url" "$(< $script)" $sudo_pass
      fi

      echo
    done

    echo
    echo
  done
}

welder compile $playbook

# Ask sudo password for non-root users
# For this to work, ssh_url needs to follow user@server-url format
if [[ ! $cfg_ssh_url =~ root\@.* ]]
then
  __user "what's the sudo password for $cfg_ssh_url: "
  read -se sudo_pass
fi

__run_scripts

welder cleanup $playbook

__success "all done!"
